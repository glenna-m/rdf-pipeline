#summary Testing the RDF Pipeline framework
<wiki:toc max_depth="1" />

= Introduction =
The RDF Pipeline framework has a regression test suite in RDF-Pipeline/t .  Since it runs as a mod_perl2 module in Apache2, the RDF Pipeline framework must be properly installed (as a mod_perl2 module) before the test suite can be run.  Once installed, the test suite may be run by issuing the following command from the RDF-Pipeline module directory:
{{{
  make test
}}}

= Test suite conventions =
The test suite depends on two directories, specified in the following environment variables, which are normally set by set_env.sh:
  * *$RDF_PIPELINE_WWW_DIR* -- The Apache DOCUMENT_ROOT for the RDF Pipeline framework.
  * *$RDF_PIPELINE_MODULE_DIR* -- The RDF::Pipeline module directory, "RDF-Pipeline".

Each test is in a numbered directory RDF-Pipeline/t/0`*` and contains the following subdirectories or files.  All are optional unless noted:
  * *setup-files* -- This directory contains a snapshot of the $RDF_PIPELINE_WWW_DIR contents that should be used when running the test.  If it does not exist, the current $RDF_PIPELINE_WWW_DIR contents will be used.
  * *test-script* -- (REQUIRED) The script that runs the test.  If it returns 0, then the test passes.  Otherwise, the test fails.  The default test-script generated by add-test.perl will run pipeline-request.perl to run the test and capture the results, and then "diff -r expected-files result-files" to determine whether the test passed or failed.  However, it can be modified to do whatever you need to do.
  * *result-files* -- If used by test-script, this directory will contain a snapshot of the $RDF_PIPELINE_WWW_DIR contents as it existed after running the test.  
  * *expected-files* -- If used by test-script, this directory will contain a snapshot of the $RDF_PIPELINE_WWW_DIR contents as it _should_ be after successfully running the test.  If the result-files are the same as the expected-files then the test passes, otherwise it fails.

A test usually issues a series of HTTP requests against the Apache instance that is hosting the pipeline.  Hence, each test is normally driven by one or more URLs.  To facilitate regression testing, all information that is relevant to a test should be written to the $RDF_PIPELINE_WWW_DIR/test directory, as this is what run-test.perl expects.  By default this will include:
  * *apacheAccess.log* -- The Apache "access.log" file (excerpted and filtered through RDF-Pipeline/t/stripdates.perl to remove irrelevant detail)
  * *apacheError.log* -- The Apache "error.log" file (excerpted and filtered through RDF-Pipeline/t/filterlog.perl to remove irrelevant detail)
  * *testout* -- The concatenated results (filtered through RDF-Pipeline/t/stripdates.perl) of running 'curl -i' on the test URLs.  This includes both the headers and the content that were returned.

= Adding a new test =
The easiest way:
<ol>
<li>Configure a pipeline as needed for the test, so that the content of $RDF_PIPELINE_WWW_DIR reflects the desired initial state _prior_ to running the new test.  Do not place anything in the $RDF_PIPELINE_WWW_DIR/test directory, as this will be entirely cleared out just before the test is run.
</li>
<li>Run the command:
  {{{
  add-test.perl URL
  }}}
where URL is the URL to be requested from the pipeline.  This will generate a new, numbered test directory containing:
    * *setup-files* -- A snapshot of the current the $RDF_PIPELINE_WWW_DIR directory.
    * *test-script* -- Initial script that you can customize as needed for this test.
After creating the above files/directories, add-test.perl will invoke run-test.perl to execute the test, which in turn will create the following directory:
    * *result-files* -- A snapshot of the $RDF_PIPELINE_WWW_DIR directory after running the test.
and it will then compare the result-files with the non-existent expected-files, thus causing the test to initially fail (as it should).
</li>
<li>If necessary, you may run the test as many times as you need while debugging, using "./run-test.perl [nnnn]` or `./run-test.perl -c [nnnn]`, as described below under "Running a test" (*restarting Apache each time you have modified anything*), until you have convinced yourself that the result-files that have been produced are indeed correct for this test.  Bear in mind that the result-files are replaced each time the test is run (and the $RDF_PIPELINE_WWW_DIR files will be also if you used the -c option).
</li>
<li>After you are convinced that the result-files are correct, run
    {{{
    accept-test.perl [nnnn]
    }}}
to cause the current result-files to be saved as expected-files.  This should cause the test to pass the next time you run it.
</li>
</ol>

= Deleting a test = 
Delete that particular subdirectory, e.g., 0003.

= Diagnosing a failed test =
To figure out why a test failed, cd into that test directory, and then do:
{{{
  diff -r -x lm -x .svn expected-files result-files
}}}

= Accepting test results =
If you need to update the expected-files for a test (e.g., because a code change has caused the result-files to no longer match the expected-files), then *if you are certain that the current result-files are correct*, you can do
{{{
  accept-test.perl [nnnn]
}}}
to delete the existing expected-files and copy the current result-files to the expected-files.

= Running a test =
To run one test (or more) without using "make test":
    {{{
    run-test.perl [-c] [nnnn] ...
    }}}
where nnnn is the test's numbered directory.  This does the following for each test directory:
  * If there are setup-files, then the existing $RDF_PIPELINE_WWW_DIR files are deleted (after saving $RDF_PIPELINE_WWW_DIR to "$RDF_PIPELINE_WWW_DIR"-SAVE if -c is not specified) and replaced with setup-files.
  * The test-script is run as `./test-script '$TESTDIR' '$RDF_PIPELINE_WWW_DIR'` , where $TESTDIR is the full path of the current test directory nnnn.  The default test-script that is generated by add-test.perl saves the test results (an abridged snapshot of $RDF_PIPELINE_WWW_DIR) into result-files, and then compares them with the expected-files.  Iff they match, then test-script exits with 0 status to indicate that the test passed. 
  * The original $RDF_PIPELINE_WWW_DIR files are restored from "$RDF_PIPELINE_WWW_DIR"-SAVE if -c was not specified.

The -c option ("clobber") tells run-test.perl to leave the $RDF_PIPELINE_WWW_DIR files in their final state after running the test, instead of restoring them from a saved copy.  I.e., the previous $RDF_PIPELINE_WWW_DIR files get clobbered.  This is particularly useful when you plan to add a new test (using add-test.perl) that should continue where the previous test left off.  

= Other helper scripts =
  * *pipeline-request [GET/HEAD] URL*
    Use curl to invoke URL using the method specified (or GET, if no method is specified), saving the resulting headers and content to $RDF_PIPELINE_WWW_DIR/test/testout .  For example, `pipeline-request HEAD http://localhost/node/foo` will use curl to issue a HEAD request to http://localhost/node/foo .