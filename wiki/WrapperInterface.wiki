#summary Wrapper Interface

= Introduction =
The RDF Pipeline framework is designed to allow additional wrappers to be implemented for new node types.  A wrapper is provided by implementing a wrapper interface.  The mechanics of the interface depend on the programming language that is use (e.g., Java or Perl), but all interfaces involve the same kinds of functions.

= Wrapper Functions =
A wrapper must implement the following functions.

== fDeserializer(serFilename, deserName) (OPTIONAL) ==
Parameters:
  * *serFilename* -- String: Filename of the content to be deserialized.
  * *deserName* -- String: Local name for the resulting deserialized object.
Returns:
  * Boolean: true (1) iff the deserialization succeeded.

Deserializes the content of serFilename to deserName.  Inverse of fSerializer.  

A node type whose cached data is already serialized does not need to implement _fDeserializer_.

== fSerializer(deserName, serFilename) ==
Parameters:
  * *deserName* -- String: Local name of the object to be serialized.
  * *serFilename* -- String: Filename of the content to be deserialized.
Returns:
  * Boolean: true (1) iff the serialization succeeded.

Serializes the object named by deserName to the file named by serFilename.  Inverse of fDeserializer.

A node type whose cached data is already serialized does not need to implement _fSerializer_.

== fRunUpdater(nm, thisUri, thisUpdater, out, thisInputs, thisParameters, oldThisLM, callerUri, callerLM) ==
Parameters:
  * *nm* -- Hashmap: Node metadata.
  * *thisUri* -- String: URI of the node to be updated.
  * *thisUpdater* -- String: Local name of the updater to be invoked.
  * *out* -- String: Local name of the output cache to be updated.
  * *thisInputs* -- List of strings: Local names of thisUri's input caches.
  * *thisParameters* -- List of strings: Local names of thisUri's parameter caches.
  * *oldThisLM* -- String: Previous [http://code.google.com/p/rdf-pipeline/wiki/LM LM] of _out_.  If the updater does not end up changing the content of _out_ then _oldThisLM_ should be returned as the function result of _fRunUpdater_, so that the framework will recognize that _out_ did not change.
  * *callerUri* -- (AT RISK) String: URI of the downstream node (in the case of GET) or upstream node (in the case of NOTIFY) that caused thisUri to be updated.
  * *callerLM* -- (AT RISK) String: [http://code.google.com/p/rdf-pipeline/wiki/LM LM] of _callerUri_.
Returns:
  * String: [http://code.google.com/p/rdf-pipeline/wiki/LM LM] of the updated content of _out_ -- typically generated by GenerateNewLM() -- or the empty string if the updater failed.

Run updater _thisUpdater_ on node _thisUri_ using inputs _thisInputs_ and parameters _thisParameters_ to refresh the content of _out_.

== fUriToLocalName(uri, relativeUri, root) ==
Parameters:
  * *uri* -- String: URI to be converted to a local name.
  * *relativeUri* -- String: Relative part of _uri_ e.g., the "foo/bar" part of "http://example.com:8080/foo/bar", if "http://example.com:8080" is the $baseUri.  Note that the initial "/" has also been stripped.  This parameter is provided as a convenience, since most _fUriToLocalName_ functions will either substitute or concatenate the _root_ with the _relativeUri_ to produce the resulting local name.
  * *root* -- String: Root of the local name.  This is the substring or pattern from which _fUriToLocalName_ will create a local name from _uri_.
Returns:
  * String: Local name corresponding to _uri_.

Converts URI _uri_ to a local name based on _root_ as the root of the local name space.  

(A "local name" is a name that is relevant to a particular node type.  For example, a filename in the case of FileNode.)

For example, for a !FileNode _fUriToLocalName_ will convert a URI to the corresponding filename within the $DOCUMENT_ROOT of the current server.  ($baseUri is a synonym for the Apache $DOCUMENT_ROOT.)  In this case, if _uri_ is "http://example.com:8080/foo/bar" and $baseUri is "http://example.com:8080" and _root_ is "/www", then _relativeUri_ will be "foo/bar" and the result of _fUriToLocalName_ will be "/www/foo/bar".