#!/usr/bin/perl -w

# Copyright 2018 by David Booth
# This software is available as free and open source under
# the Apache 2.0 software license, which may be viewed at
# http://www.apache.org/licenses/LICENSE-2.0.html
# Code home: https://github.com/rdf-pipeline

use strict;

# Output a sample of the given RDF triples or quads.  
# Input must be ntriples; output is ntriples.
# Input lines are selected in chunks, with a default
# chunkSize of 100, in order to make a (weak) attempt
# to keep semantically related triples together.
#
# For speed, this program does not use official RDF parsing.
# It assumes that each triple/quad is on a single line and
# subject, property object and value/graph are separated by whitespace,
# and no whitespace (even escaped) occurs within the subject
# or property.
#
# Runtime: 9 seconds / 9M triples, outputting 10k triples
# on a 2017 Intel Core i5 laptop with SSD drive.
#

############################################################

my $program = $0;
$program =~ s/^.*[\\\/]//;

################## Get options ###################

my $help = 0;
my $debug = 0;
my $verbose = 0;
my $quiet = 0;
my $maxTriples = 10000;	# Keep this many triples total
my $maxTypes = 0;	# Keep up to this many type declarations
my $pattern = "";	# Keep triples matching this pattern
my $maxMatches = 0;	# Keep up to this regex-matched triples
my $chunkSize = 100;	# Number of contiguous triples to output
use Getopt::Long qw(:config no_ignore_case);
GetOptions(
                "number|n=s" => \$maxTriples,
                "types|t=s" => \$maxTypes,
                "pattern|p=s" => \$pattern,
                "matches|m=s" => \$maxMatches,
                "chunk|c=s" => \$chunkSize,
                "help|h" => \$help,
                "debug|d" => \$debug,
                "verbose|v" => \$verbose,
                "quiet|q" => \$quiet,
                ) or die "$program: Error reading options.\n";

#################### DieUsage ####################
sub DieUsage
{
die "Usage: $program [ options ] [ turtleFiles...]
Options:
	-n, --number n
		Keep up to n total triples/quads (including type 
		declarationss)

	-t, --types n
		Keep up to n total type declaration triples/quads 

	-p, --pattern p
		Try to keep triples/quads that match regex p

	-m, --matches m
		Keep up to m triples/quads that match regex p

	-c, --chunk c
		Keep chunks of this many triples at a time

	-q, --quiet
		Suppress statistics

	-h, --help
		Print usage info and exit
";
}

###################### main ######################

my $rdfType = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>";

&DieUsage() if $help;
scalar(@ARGV)==1 || &DieUsage();
my $infile = shift @ARGV;

# How many total lines/triples/quads are there?
my $estTriples = `/usr/bin/wc -l "$infile"`;
chomp $estTriples;
$estTriples =~ s/\s.*//;
warn "Input triples (estimated): $estTriples\n" if !$quiet;

# How many type statements are there?
my $estTypes = `/bin/grep -F -e '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' "$infile" | /usr/bin/wc -l`;
chomp $estTypes;
$estTypes =~ s/\s.*//;
warn "Input type declarations: $estTypes\n" if $maxTypes && !$quiet;

# Conceptually partition the input into $nPartitions, and
# output the first $chunkSize triples of each partition.
my $nPartitions = int($maxTriples / $chunkSize);
warn "nPartitions: $nPartitions\n" if $debug;
my $partitionSize = int( $estTriples / $nPartitions );
warn "partitionSize: $partitionSize\n" if $debug;
warn "chunkSize: $chunkSize\n" if $debug;
warn "pattern: {$pattern}\n" if $debug;
warn "maxMatches: $maxMatches\n" if $debug;

my $nTriples = 0;	# Total triples output so far
my $nSkipped = 0;	# Total triples ignored
my $nTypes = 0;		# Type declarations output so far
my $nMatches = 0;	# Statements that matched $pattern
my $nSeen = 0;		# Triples seen so far in this partition
my $nUnrecognized = 0;	# Non-blank lines not parsable as triples/quads.

# Iterate through all lines of input, outputting lines to keep.
open(my $fh, "<$infile") || die "$program: [ERROR] Cannot open $infile\n";
my $line;
while ($line = <$fh>) {
  last if $nTriples >= $maxTriples;
  # Triple pattern to find the predicate:
  if ($line =~ m/^\s*\S+\s+(\S+)\s/) {
    # Found a triple.  Keep it?
    my $predicate = $1;
    # Keep type declaration?
    if ($maxTypes && $nTypes < $maxTypes && $predicate eq $rdfType) {
      $nTypes++;
      &Keep();
    # Keep line matching $pattern?
    } elsif ($pattern ne "" && ($nMatches < $maxMatches || !$maxMatches) && $line =~ m/$pattern/) {
      $nMatches++;
      &Keep();
    # Keep sample lines (first $chunkSize lines of current partition)?
    } elsif ($nSeen < $chunkSize) {
      &Keep();
    } else {
      &Skip();
    }
  $nSeen++;
  $nSeen = 0 if $nSeen >= $partitionSize;
  } else {
    # Echo any line that does not match the triple pattern above,
    # assuming that it is empty or we mis-parsed it.
    print $line;
    if ($line !~ m/\S/) {
      # Non-empty line
      warn "$program: [WARNING] Unrecognized line: $line\n" if !$nUnrecognized;
      $nUnrecognized++;
    }
  }
}
close($fh) || die;

print STDERR "\n" if $debug && $verbose;

warn "Output triples: $nTriples\n" if !$quiet;
warn "Output type declarations: $nTypes\n" if $maxTypes && !$quiet;
warn "Output statements that matched pattern: $nMatches\n" if $pattern && !$quiet; 
warn "\n[WARNING] Found $nUnrecognized lines\n" if $nUnrecognized;
exit 0;

############# Keep ###############
sub Keep
{
$nTriples++;
print $line;
print STDERR "O" if $debug && $verbose;
}

############# Skip ###############
sub Skip
{
$nSkipped++;
print STDERR "." if $debug && $verbose;
}

