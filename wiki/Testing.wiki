#summary Testing the RDF Pipeline framework
<wiki:toc max_depth="1" />

= Introduction =
The RDF Pipeline framework has a regression test suite in RDF-Pipeline/t .  Since it runs as a mod_perl2 module in Apache2, the RDF Pipeline framework must be properly installed (as a mod_perl2 module) before the test suite can be run.  Once installed, the test suite may be run by issuing the following command from the RDF-Pipeline module directory:
{{{
  make test
}}}

= Environment variables =
The test suite depends on two directories, which must be specified in the following environment variables:
  * *$RDF_PIPELINE_WWW_DIR* -- The Apache DOCUMENT_ROOT for the RDF Pipeline framework.
  * *$RDF_PIPELINE_DEV_DIR* -- The top level RDF Pipeline development directory, which contains the RDF::Pipeline module directory "RDF-Pipeline".
These variables are normally set by $RDF_PIPELINE_DEV_DIR/set_env.sh, which will also add the test scripts to your $PATH if our "source" it:
{{{
cd $RDF_PIPELINE_DEV_DIR
. set_env.sh
}}}
You should customize set_env.sh according to your site.

= Test suite conventions =
Each test is in a numbered directory RDF-Pipeline/t/nnnn (where nnnn is a four-digit number that _must_ start with 0) and contains the following subdirectories or files.  All are optional unless noted:
  * *setup-files* -- This directory contains a snapshot of the $RDF_PIPELINE_WWW_DIR contents that should be used when running the test.  If it does not exist, the current $RDF_PIPELINE_WWW_DIR contents will be used.
  * *test-script* -- (REQUIRED) The script that runs the test.  If it returns 0, then the test passes.  Otherwise, the test fails.  The default test-script generated by add-test.perl will run pipeline-request.perl to invoke the test and capture the results in the $RDF_PIPELINE_WWW_DIR/test directory, and then it will compare the expected-files with the contents of $RDF_PIPELINE_WWW_DIR to determine whether the test passed or failed.  However, it can be modified to do whatever you need to do.
  * *expected-files* -- If used by test-script, this directory will contain a snapshot of the $RDF_PIPELINE_WWW_DIR contents as it _should_ be after successfully running the test.  If the result files are the same as the expected-files then the test passes, otherwise it fails.

A test usually issues one or more HTTP requests against the Apache instance that is hosting the pipeline.  Hence, each test is normally driven by one or more URLs.  To facilitate regression testing, a test should write all information that is relevant to determining whether it passed, to the $RDF_PIPELINE_WWW_DIR/test directory, as this is what run-test.perl expects.  By default this will include:
  * *apacheAccess.log* -- The Apache "access.log" file (excerpted and filtered through RDF-Pipeline/t/stripdates.perl to remove irrelevant detail)
  * *apacheError.log* -- The Apache "error.log" file (excerpted and filtered through RDF-Pipeline/t/filterlog.perl to remove irrelevant detail)
  * *testout* -- The concatenated results (filtered through RDF-Pipeline/t/stripdates.perl) of running 'curl -i' on the test URLs.  This includes both the headers and the content that were returned.

= Adding a new test =
<ol>
<li>Configure a pipeline as needed for the test, so that the content of $RDF_PIPELINE_WWW_DIR reflects the desired initial state _prior_ to running the new test.  Do not place anything in the $RDF_PIPELINE_WWW_DIR/test directory, as the default test script clears that directory just before the test is run.
</li>
<li>Run the command:
  {{{
  add-test.perl URL [shortDescription]
  }}}
where URL is the URL to be requested from the pipeline, and shortDescription is a short bit of test to be appended to the generated test name.  This will generate a new, numbered test directory containing:
    * *setup-files* -- A snapshot of the current the $RDF_PIPELINE_WWW_DIR directory.  You can customize its content as appropriate, such as deleting files that are not needed in setting up for your test.
    * *test-script* -- Initial script that you can customize as needed for this test.
After creating the above files/directories, add-test.perl will invoke run-test.perl to execute the test, which will: (a) leave the test results in the $RDF_PIPELINE_WWW_DIR directory; and (b) compare the results with the expected-files, thus causing the test to initially fail (as it should) because the test will not yet have any expected-files.
</li>
<li>If necessary, you may run the test as many times as you need while debugging, using "`./run-test.perl [nnnn]`", as described below under "Running a test", *restarting Apache each time you have modified anything*.  Bear in mind that $RDF_PIPELINE_WWW_DIR will be left holding the final results of your test each time a test is run.
</li>
<li>After you are convinced that the result files in $RDF_PIPELINE_WWW_DIR are correct, run
    {{{
    accept-test.perl [nnnn]
    }}}
to cause the current $RDF_PIPELINE_WWW_DIR files to be saved as expected-files.  This should cause the test to pass the next time you run it.  If you omit the test number nnnn, it will default to the highest numbered test, which will normally be the one you just added.
</li>
</ol>

= Running a test =
Before running a test it is best to *restart Apache*, to be sure that it uses the latest version of whatever you are working on.  This must be done as root:
{{{
    # apache2ctl stop ; sleep 5 ; apache2ctl start
}}}

To run one test (or more) without using "make test":
    {{{
    run-test.perl [nnnn] ...
    }}}
where nnnn is the test's numbered directory, and defaults to the highest numbered test if not specified.  This does the following for each test directory:
  * If there are setup-files, then the existing $RDF_PIPELINE_WWW_DIR files are deleted and replaced with setup-files.
  * The test-script is run as `cd '$TESTDIR' ; ./test-script '$RDF_PIPELINE_WWW_DIR'` , where $TESTDIR is the full path of the current test directory nnnn.  If it fails, the test fails.
  * The contents of $RDF_PIPELINE_WWW_DIR are copied to /tmp/rdfp/nnnn/actual-files and /tmp/rdfp/nnnn/actual-filtered, and the contents of $TESTDIR/expected-files are copied to /tmp/rdfp/nnnn/expected-filtered.
  * The files in /tmp/rdfp/nnnn/expected-filtered and /tmp/rdfp/nnnn/actual-filtered are filtered through helpers/filter-expected.perl and helpers/filter-actual.perl (respectively).
  * The contents of /tmp/rdfp/nnnn/expected-filtered and /tmp/rdfp/nnnn/actual-filtered are compared (excluding "lm", "ont" and hidden files/directories).  If they do not match, the test fails.
  * The contents of /tmp/rdfp/nnnn/actual-filtered are searched for the word "error" or "died" (case insensitively), and the test fails if either word is present.

Finally, run-test.perl silently exits with 0 status if the test passed, or it noisily prints an error and exits with non-zero status if the test failed.

= Diagnosing a failed test =
A couple of approaches:
  * cd into `/tmp/rdfp/nnnn` and do:
  {{{
  compare-results.perl expected-filtered actual-filtered
  }}}
  * View `/tmp/rdfp/diffs.txt` after running the failed test.
  * View the `/tmp/rdfp/nnnn/actual-filtered/test/*` files.

= Accepting test results =
If you need to update the expected-files for one or more tests (e.g., because a code change has caused the result files to no longer match the expected-files), then *once you are certain that the current result files are correct*, you can do
{{{
  accept-test.perl [-s][nnnn] ...
}}}
to delete the existing expected-files and copy the current actual-files to the expected-files.

The "`-s`" option will cause accept-test.perl to attempt to add the test to subversion.

= Filtering global output changes =
If you make a code change that affects the output of all (or several) tests, such as changing the output format, thus causing the actual-files to not match the expected-files, then it may be tedious and error prone to individually verify that the current actual-files are correct.  To enable such global changes to be easily verified, the following scripts (in the helpers directory) may be customized to filter the expected and actual files, respectively:
  * filter-expected.perl
  * filter-actual.perl
These scripts are run by run-test.perl on a copy of each of the expected and actual files.  These copies are in /tmp/rdfp/nnnn/ (where nnnn is the test name).  *After the global changes have been verified and accepted, these scripts should be modified back to being no-ops.*

In addition, when tests are run by run-test.perl, the concatenated diffs of all tests that it runs are written to /tmp/rdfp/diffs.txt, so that you can quickly view all differences (after filtering through filter-expected.perl and filter-actual.perl).

= Deleting a test = 
You can delete a test by deleting its directory, e.g., 0003, however:
  * It is helpful to keep the test numbers consecutive, because the Perl test framework reports test failures by number (counting from the first test).  Therefore it is safe to delete the highest numbered test, but instead of deleting an earlier test it is better to make it a no-op by modifying its "test-script" to immediately "exit 0;", so that it will always pass.
  * If the directory has already been checked into subversion, then you will have to delete it through subversion, using an "svn rm DIR" command, where DIR is the directory relative to the subversion trunk.

= Other helper scripts =
The $RDF_PIPELINE_DEV_DIR/RDF-Pipeline/t/helpers directory contains some additional helper scripts that you may find useful.  They are used by the other test scripts in $RDF_PIPELINE_DEV_DIR/RDF-Pipeline/t , so be sure you check how they are used before modifying them.
  * *pipeline-request [GET/HEAD] URL*
    Use curl to invoke URL using the method specified (or GET, if no method is specified), saving the resulting headers and content to $RDF_PIPELINE_WWW_DIR/test/testout .  For example, "`pipeline-request HEAD http://localhost/node/foo`" will use curl to issue a HEAD request to http://localhost/node/foo .
  * *filterlog.perl* -- A script for filtering Apache log files.
  * *stripdates.perl* -- A script for replacing datetimes with some datetime constants.
  * *copy-dir.perl [-s] sourceDir destDir* -- Recursively copy sourceDir to destDir, excluding hidden (`.*`) files, after first deleting destDir.  Option '`-s`' (subversion) causes copy-dir.perl to be svn-aware, which means it will do "svn rm" and "svn add".
  * *compare-results.perl [-q] dir1 dir2* -- Recursively compare dir1 with dir2 (excluding "lm", "ont" and hidden subdirectories/files), returning 0 iff they are the same. Option "-q" (quiet) suppresses most output. 

= Subversion (svn) issues =
Because subversion places hidden ".svn" files in directories that are under its control, these test scripts can cause some hassle in working with subversion.  To avoid copying the ".svn" files, the test scripts above use `helpers/copy-dir.perl`, which excludes hidden files.  Still, you may find sometimes that you need to fix things by using the "`--force`" svn option, such as:
{{{
cd $RDF_PIPELINE_DEV_DIR
svn update --force
}}}